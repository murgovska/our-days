{"version":3,"sources":["serviceWorker.js","components/menu/menuItems/MenuItems.jsx","components/menu/Menu.jsx","App.js","reducers/rootReducer.js","index.js","reducers/store.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","MENU_ITEMS","name","id","url","MenuItems","props","selectMenuItem","bind","selectedItem","e","this","setState","target","className","map","item","key","to","Component","Menu","icon","faUser","size","App","createReducer","asyncReducers","combineReducers","products","store","initialState","createStore","configureStore","history","createBrowserHistory","ReactDOM","render","path","component","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f5637c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport './MenuItems.scss'\nimport { Link } from 'react-router-dom'\n\nconst MENU_ITEMS = [\n  {\n    name: 'CASINO',\n    id: 'casino',\n    url: 'casino'\n  },\n  {\n    name: 'LIVE CASINO',\n    id: 'livecasino',\n    url: 'live-casino'\n  },\n  {\n    name: 'PROMOTIONS',\n    id: 'promotions',\n    url: 'promotions'\n  }\n]\n\nclass MenuItems extends Component {\n  constructor (props) {\n    super(props)\n\n    this.selectMenuItem = this.selectMenuItem.bind(this)\n    this.state = {\n      selectedItem: MENU_ITEMS[0].id\n    }\n  }\n\n  selectMenuItem (e) {\n    this.setState({\n      selectedItem: e.target.id\n    })\n  }\n\n  render () {\n    const { selectedItem } = this.state\n\n    return (\n      <div className='menu-items'>\n        <div className='user-details'>\n          <ul>\n            {MENU_ITEMS.map((item) => {\n              return (\n                <Link key={item.id} id={item.id} to={`/${item.url}`}>\n                  <li className={item.id === selectedItem ? 'active' : 'default'}>\n                    {item.name}\n                  </li>\n                </Link>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MenuItems\n","import React, { Component } from 'react'\nimport './Menu.scss'\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport MenuItems from './menuItems/MenuItems';\n\nclass Menu extends Component {\n  render () {\n    return (\n      <div className='menu'>\n        <div className='user-details'>\n          <span className='logo'>OUR LOGO</span>\n          <FontAwesomeIcon icon={faUser} className='icon' size=\"3x\" />\n          <MenuItems />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Menu\n","import React from 'react'\nimport './App.scss'\nimport './components/menu/Menu'\nimport Menu from './components/menu/Menu'\n\nfunction App () {\n  return (\n    <div className='app'>\n      <Menu />\n      <div className='content'>\n        More to come soon\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\nimport products from './products'\n\nexport const createReducer = asyncReducers => {\n  return combineReducers({\n    products,\n    ...asyncReducers\n  })\n}\n\n// https://stackoverflow.com/questions/32968016/how-to-dynamically-load-reducers-for-code-splitting-in-a-redux-application\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router, Route } from 'react-router'\nimport { createBrowserHistory } from 'history'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n// import routes from './routes'\nimport App from './App'\nimport './index.scss'\nimport configureStore from './reducers/store'\n\nconst store = configureStore()\nconst history = createBrowserHistory()\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <Router history={history} routes={routes} /> */}\n    <Router history={history}>\n      <Route path='/' component={App} />\n    </Router>\n   </Provider>\n  , document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import { createStore } from 'redux'\nimport { createReducer } from './rootReducer'\n\nexport default function configureStore (initialState) {\n  const store = createStore(createReducer(), initialState)\n  store.asyncReducers = {}\n\n  return store\n}\n\nexport function injectAsyncReducer (store, name, asyncReducer) {\n  store.asyncReducers[name] = asyncReducer\n  store.replaceReducer(createReducer(store.asyncReducers))\n}\n"],"sourceRoot":""}